// Monitor Inventoried Services - Uncomment the apply Service rule below to monitor all inventoried services
//apply Service "WinSvc " for (ServiceName => config in host.vars.inv.windows.service) {
//  import "generic-service"
//
//  check_command = "check_services"
//
//  vars += config
//  vars.svc_check = true
//  vars.svc_included_services = vars.ServiceName
//  vars.svc_expected_state = vars.CurrentStatus
//  vars.svc_single_check = true
//}

// Monitor System Category Services - Uncomment the apply Service rule below to monitor all System services
//apply Service "WinSvcs - System" {
//	import "generic-service"
//	
//	check_command = "check_services"
//	
//	vars.svc_check = true
//	vars.svc_categories = "System"
//	assign where host.name == NodeName
//}

// Monitor Essential Category Services - Uncomment the apply Service rule below to monitor all Essential services
//apply Service "WinSvcs - Essential" {
//	import "generic-service"
//	
//	check_command = "check_services"
//	
//	vars.svc_check = true
//	vars.svc_categories = "Essential"
//	assign where host.name == NodeName
//}

// Monitor Role Category Services - Uncomment the apply Service rule below to monitor all Role services
//apply Service "WinSvcs - Role" {
//	import "generic-service"
//	
//	check_command = "check_services"
//	
//	vars.svc_check = true
//	vars.svc_categories = "Role"
//	vars.svc_hide_long_output = false // Change this to true if the output is uselessly long
//	assign where host.name == NodeName
//}

// Monitor Supporting Category Services - Uncomment the apply Service rule below to monitor all Supporting services.
// This Service is redundant if you also monitor inventoried ThirdParty services.
//apply Service "WinSvcs - Supporting" {
//	import "generic-service"
//	
//	check_command = "check_services"
//	
//	vars.svc_check = true
//	vars.svc_categories = "Supporting"
//  vars.svc_warn_on_category = "Supporting" // If any services are in an incorrect state, the result will be Warning and not Critical. Insert something else here if you want critical from this check.
//	vars.svc_hide_long_output = false // Change this to true if the output is uselessly long
//	vars.svc_excluded_services = "gupdate"
//	assign where host.name == NodeName
//}

// Monitor ThirdParty Category Services - Uncomment the apply Service rule below to monitor all ThirdParty services.
// This Service is redundant if you also monitor inventoried ThirdParty services.
//apply Service "WinSvcs - ThirdParty" {
//	import "generic-service"
//	
//	check_command = "check_services"
//	
//	vars.svc_check = true
//	vars.svc_categories = "ThirdParty"
//	vars.svc_hide_long_output = false // Change this to true if the output is uselessly long
//	vars.svc_excluded_services = "gupdate"
//	assign where host.name == NodeName
//}

// check_services CommandDefinition, do not touch anything below this comment
object CheckCommand "check_services" {
	import "plugin-check-command"

	command = [ PluginDir + "/check_services.exe" ]

	arguments = {
		"--inventory" = {
			set_if = "$svc_inventory$"	
			description = "Switch to use to provide inventory instead of checking for the health."
		}
		"--check-service" = {
			set_if = "$svc_check$"
			description = "Switch to use to check the health status of the local services"
		}
		"--categories" = {
			value = "$svc_categories$"
			description = "Argument, which categories to check, valid options are: Basic(includes the 4 next categories), System, Essential, Role, Supporting, ThirdParty(default), Ignored(not included in all)."
		}
		"--inv-level" = {
			value = "$svc_inventory_level$"
			description = "Argument to change the level of output. Default is 'normal', available options are 'normal','full'"
		}
		"--inv-format" = {
			value = "$svc_inventory_format$"
			description = "Argument to provide output of the inventory in other formats, valid options are 'readable', 'csv', 'i2conf' and 'json'"
		}
		"--excluded-services" = {
			value = "$svc_excluded_services$"
			description = "Argument, excludes services from checks and inventory. Provide multiple with spaces between"
		}
		"--included-services" = {
			value = "$svc_included_services$"
			description = "Argument, includes services to check while all other services are excluded, affects both checks and inventory. Provide multiple with spaces between"
		}
		"--stopped-services" = {
			value = "$svc_stopped_services$"
			description = "Argument, these services are checked that they are stopped. Provide multiple with spaces between"
		}
		"--running-services" = {
			value = "$svc_running_services$"
			description = "Argument, these services are checked that they are started. Provide multiple with spaces between"
		}
		"--svc-in-sys-category" = {
			value = "$svc_in_sys_category$"
			description = "Argument to set one or more services to the be included in the System category for both check and inventory."
		}
		"--svc-in-ess-category" = {
			value = "$svc_in_ess_category$"
			description = "Argument to set one or more services to the be included in the Essential category for both check and inventory."
		}
		"--svc-in-role-category" = {
			value = "$svc_in_role_category$"
			description = "Argument to set one or more services to the be included in the Role category for both check and inventory."
		}
		"--svc-in-sup-category" = {
			value = "$svc_in_sup_category$"
			description = "Argument to set one or more services to the be included in the Supporting category for both check and inventory."
		}
		"--svc-in-3rd-category" = {
			value = "$svc_in_3rd_category$"
			description = "Argument to set one or more services to the be included in the ThirdParty category for both check and inventory."
		}
		"--svc-in-ign-category" = {
			value = "$svc_in_ign_category$"
			description = "Argument to set one or more services to the be included in the Ignored category for both check and inventory."
		}
		"--inv-all-running" = {
			set_if = "$svc_inv_all_running$"	
			description = "Switch to list for inventory all Services running in the Categories, not only 'Automatic' services."
		}
		"--check-all-starttypes" = {
			set_if = "$svc_check_all_starttypes$"	
			description = "Switch to check all Services in the Categories, not only 'Automatic' services."
		}
		"--delayed-grace" = {
			value = "$svc_delayed_grace$"
			description = "Argument to provide a grace time for 'Automatic (Delayed Start)' services after bootup to start within. Default value is '60' (s)."
		}
		"--warn-on-category" = {
			value = "$svc_warn_on_category$"
			description = "Argument to return warning instead of critical on these ServiceCategories. Default is 'Supporting'."
		}
		"--expected-state" = {
			set_if = "$svc_single_check$"	
			value = "$svc_expected_state$"
			description = "Argument used in the Icinga2 AutoApply rules, sets the expected state of the service, used with --expected-state."
		}
		"--hide-long-output" = {
			set_if = "$svc_hide_long_output$"	
			description = "Switch to hide the long service output, only prints the summary output and any services deviating from 'OK'"
		}
		"--hide-category" = {
			set_if = "$svc_hide_category$"	
			description = "Switch to hide category from output, this only applies when there is two or more categories being checked"
		}
		"--icinga2" = {
			set_if = "$svc_icinga2$"	
			description = "Used in the Icinga2 CommandDefinition, returns output and perfdata to the correct class. Do not use via command line."
		}
		"--single-check" = {
			set_if = "$svc_single_check$"	
			description = "Switch used in the Icinga2 AutoApply rules, assumes only one service is being checked, specified via --included-services"
		}
		"--split-by" = {
			value = "$svc_split_by$"
			description = "Argument used to specify what splits all Service and Category arguments. Default is a single space, ' '."
		}
		"--inv-hide-empty" = {
			set_if = "$svc_inv_hide_empty_vars$"	
			description = "Switch to hide empty vars from inventory output."
		}
		"--file-format" = {
							set_if = "$svc_override_file$"
			value = "$svc_file_format$"
			description = "Argument to specify format of the file path given in category-file, assumes CSV if nothing else is specified"
		}
		"--category-file" = {
							set_if = "$svc_override_file$"
			value = "$svc_category_file$"
			description = "Argument to provide for both inventory and checks a category file that provides categories for the returned inventory or the categories switch to exclude everything not in those categories."
		}
		"--verbose" = {
			set_if = "$svc_verbose$"
			description = "Switch to use when trying to figure out why a service is not included, excluded or similarly when the returned output is not as expected"
		}
		
	}
	//vars.svc_check = false
	//vars.svc_inventory = false
	//vars.svc_categories = "ThirdParty"
	//vars.svc_inventory_level = "normal"
	//vars.svc_inventory_format = "i2conf"
	//vars.svc_excluded_services = ""
	//vars.svc_included_services = ""
	//vars.svc_stopped_services = ""
	//vars.svc_running_services = ""
	//vars.svc_in_sys_category = ""
	//vars.svc_in_ess_category = ""
	//vars.svc_in_role_category = ""
	//vars.svc_in_sup_category = ""
	//vars.svc_in_3rd_category = ""
	//vars.svc_in_ign_category = ""
	//vars.svc_inv_all_running = false
	//vars.svc_check_all_starttypes = false
	//vars.svc_delayed_grace = "60"
	//vars.svc_warn_on_category = "Supporting"
	//vars.svc_expected_state = "Running"
	//vars.svc_hide_long_output = false
	//vars.svc_hide_category = false
	//vars.svc_icinga2 = false
	//vars.svc_single_check = false
	//vars.svc_split_by = " "
	//vars.svc_inv_hide_empty_vars = false
	//vars.svc_override_file = false
	//vars.svc_file_format = "CSV"
	//vars.svc_category_file = ""
	//vars.svc_verbose = false	
}